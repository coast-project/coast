---
Checks:          '-*,bugprone-macro-parentheses,cppcoreguidelines-init-variables,readability-else-after-return,readability-implicit-bool-conversion,readability-delete-null-pointer,readability-container-size-empty,readability-redundant-function-ptr-dereference,readability-redundant-member-init,readability-redundant-smartptr-get,readability-string-compare,readability-uppercase-literal-suffix,readability-misplaced-array-index,misc-unconventional-assign-operator'
#Checks:          '-*,portability-*,bugprone-*,clang-analyzer-*,modernize-*'
#Checks:          '-*,readability-named-parameter,modernize-replace-auto-ptr,modernize-loop-convert,google-default-arguments,cppcoreguidelines-pro-type-reinterpret-cast,cppcoreguidelines-pro-type-const-cast'
# modernize-use-nullptr,google-runtime-int,
# List of functions and docs: https://clang.llvm.org/extra/clang-tidy/checks/list.html
WarningsAsErrors: ''
HeaderFilterRegex: ''
AnalyzeTemporaryDtors: true
FormatStyle:     file
User:            m1huber
CheckOptions:
  - key:             cert-dcl16-c.NewSuffixes
    value:           'L;LL;LU;LLU'
  - key:             cert-oop54-cpp.WarnOnlyIfThisHasSuspiciousField
    value:           '0'
  - key:             cppcoreguidelines-explicit-virtual-functions.IgnoreDestructors
    value:           '1'
  - key:             cppcoreguidelines-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic
    value:           '1'
  - key:             google-readability-braces-around-statements.ShortStatementLines
    value:           '1'
  - key:             google-readability-function-size.StatementThreshold
    value:           '800'
  - key:             google-readability-namespace-comments.ShortNamespaceLines
    value:           '10'
  - key:             google-readability-namespace-comments.SpacesBeforeComments
    value:           '2'
  - key:             modernize-loop-convert.MaxCopySize
    value:           '16'
  - key:             modernize-loop-convert.MinConfidence
    value:           reasonable
  - key:             modernize-loop-convert.NamingStyle
    value:           CamelCase
  - key:             modernize-pass-by-value.IncludeStyle
    value:           llvm
  - key:             modernize-replace-auto-ptr.IncludeStyle
    value:           llvm
  - key:             modernize-use-nullptr.NullMacros
    value:           'NULL'
  - key:             readability-identifier-naming.ClassCase
    value:           CamelCase
  - key:             readability-identifier-naming.ClassMethodCase
    value:           CamelCase
  - key:             readability-redundant-smartptr-get.IgnoreMacros
    value:           1
...

# Proposed not yet enabled checks
#
# Must:
#    clang-analyzer-cplusplus*
#    clang-analyzer-deadcode*
#    clang-analyzer-nullability*
#    clang-analyzer-security*
#    misc-misplaced-const
#    misc-redundant-expression
#    misc-static-assert
#    misc-uniqueptr-reset-release
#    misc-unused-alias-decls
#    misc-unused-using-decls
#    modernize-deprecated-headers
#    modernize-make-shared
#    modernize-make-unique
#    modernize-raw-string-literal
#    modernize-redundant-void-arg
#    modernize-return-braced-init-list
#    modernize-use-bool-literals
#    modernize-use-default-member-init
#    modernize-use-emplace
#    modernize-use-equals-*
#    modernize-use-noexcept
#    modernize-use-nullptr
#    modernize-use-override
#    modernize-use-using
#    performance-*
#    bugprone-*
#    readability-function-size
#
# Should:
#    misc-unconventional-assign-operator
#    modernize-use-auto
#    cppcoreguidelines-*
#
# Should with C++17:
#    modernize-concat-nested-namespaces
#    modernize-unary-static-assert
#    modernize-use-nodiscard
#    modernize-use-uncaught-exceptions
#
# Could:
#    modernize-loop-convert
# vim: set et ai ts=4 sw=4:
# -------------------------------------------------------------------------
# Copyright (c) 2010, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------

import pkg_resources
pkg_resources.require(["SConsider"])
import os
import tempfile
import SCons
from stat import *
from SomeUtils import listFiles, findFiles, removeFiles

Import('*')

searchReplace = {
    'DIREXTENDBASEDIR': lambda env: os.path.join(env.getTargetBaseInstallDir().abspath, 'makedirextendtest',
                                                 'test'),
    'TMPDIR': lambda env: tempfile.gettempdir() if str(env['PLATFORM']) in ['cygwin', 'win32'] else '/tmp',
    'ROOTFS': lambda env: 'c:/' if str(env['PLATFORM']) in ['cygwin', 'win32'] else '/',
    'FILESIZE_len5.tst': SCons.Script.File('config/len5.tst').get_size(),
    'FILESIZE_AnythingTest.any': SCons.Script.File('config/AnythingTest.any').get_size(),
}


def SystemTestMakeDirectoryExtendCleanup(env):
    tdirabs = env.getTargetBaseInstallDir().abspath
    basepath = os.path.join(tdirabs, 'makedirextendtest')
    if os.path.isdir(basepath):
        shutil.rmtree(basepath, ignore_errors=True)


def setUp(target, source, env):
    env['ENV']['COAST_DOLOG'] = 4
    env['ENV']['COAST_LOGONCERR'] = 4
    env['ENV']['COAST_TRACE_STORAGE'] = 1
    env['ENV']['COAST_TRACE_INITFINIS'] = 1
    env['ENV']['TZ'] = 'Europe/Zurich'


def tearDown(target, source, env):
    # delete generated files
    removeFiles(
        findFiles([env.getTargetBaseInstallDir()], extensions=['.res', '.tst'], matchfiles=['include.any']))
    SystemTestMakeDirectoryExtendCleanup(env)


programDepends = [
    'testfwFoundation.testfwFoundation',
    'CoastFoundationTime.CoastFoundationTime',
    'CoastFoundationMiscellaneous.CoastFoundationMiscellaneous',
]
sourceFiles = listFiles(['*.cpp'])
copyFiles = [
    (listFiles(['config/*.any']), S_IRUSR | S_IRGRP | S_IROTH, searchReplace),
    (listFiles(['config/*.tst', 'config/*.txt', 'tmp/*']), S_IRUSR | S_IRGRP | S_IROTH),
]
runConfig = {
    'setUp': setUp,
    'tearDown': tearDown,
}
_sconsider_dist = pkg_resources.get_distribution("SConsider").parsed_version
if _sconsider_dist < pkg_resources.parse_version("0.5"):
    from SConsider import createTargets
    buildSettings = {
        packagename: {
            'linkDependencies': programDepends,
            'sourceFiles': sourceFiles,
            'targetType': 'ProgramTest',
            'copyFiles': copyFiles,
            'runConfig': runConfig,
        },
    }

    createTargets(packagename, buildSettings)
elif _sconsider_dist >= pkg_resources.parse_version("0.5"):
    from TargetMaker import EnvBuilder
    from TargetHelpers import createCopyFilesTarget, createPackageTestTarget, createPackageProgram, createPackageProgramScript, createAlias

    reltargetdir = os.path.join('tests', packagename)

    def setRelTargetDir(env):
        env.setRelativeTargetDirectory(reltargetdir)

    bin_name = packagename
    bin_target = createPackageProgram(packagename,
                                      bin_name,
                                      sourceFiles,
                                      depend=programDepends,
                                      pkg_local=[setRelTargetDir])
    bins = EnvBuilder().depend(bin_target).build().RegisterPackageTarget(packagename=packagename,
                                                                         targetname='bins')

    copyTarget = createCopyFilesTarget(packagename,
                                       'configfiles',
                                       lambda env: env.getTargetBaseInstallDir(),
                                       copyFiles,
                                       pkg_local=[setRelTargetDir])

    scriptTarget = createPackageProgramScript(packagename,
                                              bin_name,
                                              bin_target,
                                              depend=copyTarget,
                                              pkg_local=[setRelTargetDir])
    scripts = EnvBuilder().depend(scriptTarget).build().RegisterPackageTarget(packagename=packagename,
                                                                              targetname='scripts')

    testTarget = createPackageTestTarget(packagename, bin_name, scriptTarget, settings=runConfig)

    createAlias('CoastFoundationTests', testTarget)
    createAlias('tests', testTarget)

    EnvBuilder().depend(bins, scripts).build().RegisterPackageTarget(packagename=packagename,
                                                                     targetname=packagename)

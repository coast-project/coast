# vim: set et ai ts=4 sw=4:
# -------------------------------------------------------------------------
# Copyright (c) 2010, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------

import pkg_resources
pkg_resources.require(["SConsider"])
import os
import socket
import shutil
import threading
from stat import *
from SocketServer import TCPServer, BaseRequestHandler
from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
from SomeUtils import listFiles, getfqdn

Import('*')


class MyTCPServer(TCPServer):
    """This class wrapper is needed to set allow_reuse_address to True prior to
    initializing it."""
    allow_reuse_address = True


class MyHTTPServer(HTTPServer):
    """This class wrapper is needed to set allow_reuse_address to True prior to
    initializing it."""
    allow_reuse_address = True


class AcceptorHandler(BaseRequestHandler):
    def handle(self):
        data = self.request.recv(1024)
        self.request.send('')


class HTTPHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()


class NoSendRecvHandler(BaseRequestHandler):
    def handle(self):
        pass


servers = []


def startServer(host, port, server_class, handler_class):
    server = server_class((host, port), handler_class)
    servers.append(server)
    server.serve_forever()


tcpnosendrecvport = 43000
tcpsendrecvport = 43001
httpsendrecvport = 43002

hostonly, domain, fqdn = getfqdn()

faultyfqdn = 'nonexisting.server.loc'
localhostname = 'localhost'
localhostip = socket.gethostbyname(localhostname)
# gethostbyaddr here is to resolve potentially different 'localhost' name
localhostname = socket.gethostbyaddr(localhostip)[0]

hosttoresolvename = 'entry.from.etc.hosts'
try:
    hosttoresolveip = socket.gethostbyname(hosttoresolvename)
    hosttoresolvename = socket.gethostbyaddr(hosttoresolveip)[0]
except IOError as e:
    hosttoresolvename = localhostname
    hosttoresolveip = localhostip

searchReplace = {
    'FQDN': fqdn,
    'FAULTYFQDN': faultyfqdn,
    'HOSTNAME': hostonly,
    'HOSTNAMEIP': socket.gethostbyname(hostonly),
    'DOMAINONLY': domain,
    'TCPNOSENDRECVPORT': str(tcpnosendrecvport),
    'TCPSENDRECVPORT': str(tcpsendrecvport),
    'HTTPSENDRECVPORT': str(httpsendrecvport),
    'LOCALHOSTNAME': localhostname,
    'LOCALHOSTIP': localhostip,
    'RESOLVABLEHOSTFQDN': hosttoresolvename,
    'RESOLVABLEHOSTIP': hosttoresolveip,
}


def setUp(target, source, env):
    env['ENV']['COAST_TRACE_STORAGE'] = '1'
    env['ENV']['COAST_TRACE_INITFINIS'] = '1'
    # setup listener threads for socket tests
    threading.Thread(target=startServer, args=[localhostname, tcpsendrecvport, MyTCPServer,
                                               AcceptorHandler]).start()
    threading.Thread(target=startServer, args=[localhostname, httpsendrecvport, MyHTTPServer,
                                               HTTPHandler]).start()
    threading.Thread(target=startServer,
                     args=[localhostname, tcpnosendrecvport, MyTCPServer, NoSendRecvHandler]).start()


def tearDown(target, source, env):
    for server in servers:
        server.shutdown()


programDepends = [
    'testfwFoundation.testfwFoundation',
    'CoastFoundationIO.CoastFoundationIO',
    'CoastFoundationMiscellaneous.CoastFoundationMiscellaneous',
]
sourceFiles = listFiles(['*.cpp'])
copyFiles = [
    (listFiles(['config/*.any']), S_IRUSR | S_IRGRP | S_IROTH, searchReplace),
    (listFiles(['config/*.sh']), S_IRUSR | S_IRGRP | S_IROTH | S_IXUSR),
]
runConfig = {
    'setUp': setUp,
    'tearDown': tearDown,
}

_sconsider_dist = pkg_resources.get_distribution("SConsider").parsed_version
if _sconsider_dist < pkg_resources.parse_version("0.5"):
    from SConsider import createTargets
    buildSettings = {
        packagename: {
            'linkDependencies': programDepends,
            'sourceFiles': sourceFiles,
            'targetType': 'ProgramTest',
            'copyFiles': copyFiles,
            'runConfig': runConfig,
        },
    }

    createTargets(packagename, buildSettings)
elif _sconsider_dist >= pkg_resources.parse_version("0.5"):
    from TargetMaker import EnvBuilder
    from TargetHelpers import createCopyFilesTarget, createPackageTestTarget, createPackageProgram, createPackageProgramScript, createAlias
    reltargetdir = os.path.join('tests', packagename)

    def setRelTargetDir(env):
        env.setRelativeTargetDirectory(reltargetdir)

    bin_name = packagename
    bin_target = createPackageProgram(packagename,
                                      bin_name,
                                      sourceFiles,
                                      depend=programDepends,
                                      pkg_local=[setRelTargetDir])
    bins = EnvBuilder().depend(bin_target).build().RegisterPackageTarget(packagename=packagename,
                                                                         targetname='bins')

    copyTarget = createCopyFilesTarget(packagename,
                                       'configfiles',
                                       lambda env: env.getTargetBaseInstallDir(),
                                       copyFiles,
                                       pkg_local=[setRelTargetDir])

    scriptTarget = createPackageProgramScript(packagename,
                                              bin_name,
                                              bin_target,
                                              depend=copyTarget,
                                              pkg_local=[setRelTargetDir])
    scripts = EnvBuilder().depend(scriptTarget).build().RegisterPackageTarget(packagename=packagename,
                                                                              targetname='scripts')

    testTarget = createPackageTestTarget(packagename, bin_name, scriptTarget, settings=runConfig)

    createAlias('CoastFoundationTests', testTarget)
    createAlias('tests', testTarget)

    EnvBuilder().depend(bins, scripts).build().RegisterPackageTarget(packagename=packagename,
                                                                     targetname=packagename)

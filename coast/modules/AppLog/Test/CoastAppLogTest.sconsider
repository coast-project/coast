import SConsider, os, fnmatch, shutil
from stat import *

Import('*')

searchReplace = {
    "LOGDIR": lambda env: env['BASEOUTDIR'].Dir(env['RELTARGETDIR']).Dir('tmp').abspath,
    "ROTATEDIR": lambda env: env['BASEOUTDIR'].Dir(env['RELTARGETDIR']).Dir('tmp').abspath,
}

def setUp(target, source, env):
    env['ENV']['COAST_USE_MMAP_STREAMS'] = "0"
    targetDir = env['BASEOUTDIR'].Dir(env['RELTARGETDIR'])
    tmppath = targetDir.Dir('tmp').abspath
    for d in [tmppath,targetDir.Dir(os.path.join('config','rotate')).abspath]:
        if os.path.isdir(d):
            shutil.rmtree(d)
        try:
            os.makedirs(d)
        except oserror: pass

def tearDown(target, source, env):
    dir = env['BASEOUTDIR'].Dir(env['RELTARGETDIR']).Dir('config')
    for root, dirs, files in os.walk(dir.abspath):
        for f in files:
            if fnmatch.fnmatch(f, '*.log*'):
                os.unlink(os.path.join(root, f))

buildSettings = {
    packagename : {
        'linkDependencies' : ['CoastAppLog', 'testfwWDBase'],
        'sourceFiles'      : SConsider.listFiles(['*.cpp']),
        'targetType'       : 'ProgramTest',
        'copyFiles' : [
            (SConsider.listFiles(['config/*.any']), S_IRUSR | S_IRGRP | S_IROTH, searchReplace),
        ],
        'runConfig' : {
            'setUp': setUp,
            'tearDown': tearDown,
        },
    }
}

SConsider.createTargets(packagename, buildSettings)

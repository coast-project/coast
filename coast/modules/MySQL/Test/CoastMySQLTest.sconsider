# vim: set et ai ts=4 sw=4:
# -------------------------------------------------------------------------
# Copyright (c) 2010, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------

import pkg_resources
pkg_resources.require(["SConsider"])
import SConsider
import Anything
import os
import re
import sys
import shlex
from stat import *
from SConsider.SomeUtils import runCommand, multiple_replace, getFlatENV

Import('*')

defaults = None
_sconsider_dist = pkg_resources.get_distribution("SConsider").parsed_version
_helperscript_target = 'mysql.script_mysql'
_helperscript_argument_separator = '--'
if _sconsider_dist < pkg_resources.parse_version("0.3.11"):
    _helperscript_target = 'mysql.mysqlbin'
    _helperscript_argument_separator = ''

    def getRealTarget(fulltargetname):
        from SConsider import splitTargetname
        packagename, targetname = splitTargetname(fulltargetname)
        return registry.getPackageTarget(packagename, targetname)

    if not hasattr(registry, 'getRealTarget'):
        registry.getRealTarget = getRealTarget


def setUp(target, source, env):
    target = registry.getRealTarget(_helperscript_target)
    if not target:
        raise SConsider.SkipTest('required ' + _helperscript_target +
                                 ' target/executable not found, skipping test')

    relDir = env.getTargetBaseInstallDir()
    Anything.setLocalEnv(env={}, COAST_ROOT=relDir.abspath)

    global defaults
    try:
        defaults = Anything.loadFromFile('Defaults.any')
    except IOError:
        pass
    if not defaults or not defaults.has_key('MySQL'):
        raise SConsider.SkipTest('mysql backend not configured or disabled')

    searchreplacespec = [
        ('##database##', str(defaults['MySQL']['Database'])),
        ('##server##', str(defaults['MySQL']['Server'])),
        ('##port##', str(defaults['MySQL']['Port'])),
        ('##username##', str(defaults['MySQL']['Username'])),
        ('##password##', str(defaults['MySQL']['Password'])),
    ]
    logDir = env.getLogInstallDir()
    path = relDir.Dir('config')

    command = [target.abspath]
    command.extend(shlex.split(
        _helperscript_argument_separator +
        " -h {Server!s} --port={Port!s} -u {Username!s} --password={Password!s} --connect_timeout={ConnectTimeout!s}".format(
            **defaults['MySQL'])))
    res = runCommand(
        command,
        logpath=logDir.abspath,
        filename=path.File('dropTestDefinitions.sql').abspath,
        filter=lambda string: multiple_replace(searchreplacespec, string),
        env=getFlatENV(env))
    if res != 0:
        raise SConsider.SkipTest('failed to drop test database (rc=' + str(res)
                                 + '), check error log')

    res = runCommand(
        command,
        logpath=logDir.abspath,
        filename=path.File('TestDBDefinition.sql').abspath,
        filter=lambda string: multiple_replace(searchreplacespec, string),
        env=getFlatENV(env))
    if res != 0:
        raise SConsider.SkipTest('failed to load test database (rc=' + str(res)
                                 + '), check error log')


def tearDown(target, source, env):
    pass


if _sconsider_dist < pkg_resources.parse_version("0.5"):
    buildSettings = {
        packagename: {
            'targetType': 'ProgramTest',
            'linkDependencies': [
                'CoastMySQL',
                'testfwWDBase',
            ],
            'requires': [
                'CoastAppLog',
                'CoastRenderers',
                _helperscript_target,
            ],
            'sourceFiles': SConsider.listFiles(['*.cpp']),
            'copyFiles': [
                (SConsider.findFiles(['.'], ['.any', '.sql']), S_IRUSR |
                 S_IRGRP | S_IROTH),
            ],
            'runConfig': {
                'setUp': setUp,
                'tearDown': tearDown,
            },
        },
    }

    SConsider.createTargets(packagename, buildSettings)

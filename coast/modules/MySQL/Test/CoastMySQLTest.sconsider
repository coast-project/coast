from __future__ import with_statement
import os, subprocess, re, pdb
import SConsider
from stat import *
from SomeUtils import multiple_replace

user = {'user': 'TestUser', 'pw': 'CoastMySQL10'}
db = {'server': 'sifs-coast1.hsr.ch', 'port': 3306}

Import('*')

connectstringtmpl = "-h {server} -u {user} --password={pw}"
connectstring = connectstringtmpl.format(**dict(db, **user))

def runSQL(connectstring, filename, logpath, filter=None):
    targets = SConsider.packageRegistry.getPackageTarget('mysql', 'mysqlbin')
    target = targets['target']
    if not target or not os.path.isfile(filename):
        return False
    args = [target.abspath] + connectstring.split()
    res = 0

    with open(filename) as file:
        mysql = subprocess.Popen(args, stdin=subprocess.PIPE,
                                     stderr=subprocess.PIPE,
                                     stdout=subprocess.PIPE)
        content = file.read()
        if callable(filter):
            content = filter(content)
        mysql_out, mysql_err = mysql.communicate(content)

        if not os.path.isdir(logpath):
            os.makedirs(logpath)
        logfilebasename = target.name + '.' + os.path.basename(filename)
        if mysql_err:
            with open(os.path.join(logpath, logfilebasename + '.stderr'), 'w') as errfile:
                errfile.write(mysql_err)
        if mysql_out:
            with open(os.path.join(logpath, logfilebasename + '.stdout'), 'w') as outfile:
                outfile.write(mysql_out)

    return res

def setUp(target, source, env):
    logpath = env['BASEOUTDIR'].Dir(os.path.join('tests', packagename, env['LOGDIR'], env['VARIANTDIR']))
    path = env['BASEOUTDIR'].Dir(os.path.join('tests', packagename)).Dir('config')
    runSQL(connectstring, path.File('dropTestDefinitions.sql').abspath, logpath.abspath)
    runSQL(connectstring, path.File('TestDBDefinition.sql').abspath, logpath.abspath)

def tearDown(target, source, env):
    logpath = env['BASEOUTDIR'].Dir(os.path.join('tests', packagename, env['LOGDIR'], env['VARIANTDIR']))
    path = env['BASEOUTDIR'].Dir(os.path.join('tests', packagename)).Dir('config')
    runSQL(connectstring, path.File('dropTestDefinitions.sql').abspath, logpath.abspath)

buildSettings = {
    packagename : {
        'targetType'       : 'ProgramTest',
        'linkDependencies' : ['CoastMySQL', 'testfwWDBase'],
        'requires'         : ['CoastAppLog', 'CoastRenderers', 'mysql.mysqlbin'],
        'sourceFiles'      : SConsider.listFiles(['*.cpp']),
        'copyFiles' : [
            (SConsider.findFiles(['.'],['.any','.sql']), S_IRUSR|S_IRGRP|S_IROTH),
        ],
        'runConfig' : {
            'setUp'        : setUp,
            'tearDown'     : tearDown,
         },
    },
}

SConsider.createTargets(packagename, buildSettings)

import os, subprocess, re, sys, pdb
import SConsider, Anything
from stat import *
from SomeUtils import multiple_replace

Import('*')

defaults = None

def runCommand(command, filename, logpath, filter=None, **kw):
    res = 1
    content=None
    with open(filename) as file:
        content = file.read()
        if callable(filter):
            content = filter(content)

    popenObject = subprocess.Popen(command,
                                stdin=subprocess.PIPE,
                                stderr=subprocess.PIPE,
                                stdout=subprocess.PIPE,
                                **kw)

    if not os.path.isdir(logpath):
        os.makedirs(logpath)
    logfilebasename = os.path.basename(command[0]) + '.' + os.path.basename(filename)
    errfilename = os.path.join(logpath, logfilebasename + '.stderr')
    outfilename = os.path.join(logpath, logfilebasename + '.stdout')
    try:
        popen_out, popen_err = popenObject.communicate(content)
        if popen_err:
            with open(errfilename, 'w') as errfile:
                errfile.write(popen_err)
        if popen_out:
            with open(outfilename, 'w') as outfile:
                outfile.write(popen_out)
        res = popenObject.returncode
    except OSError, e:
        with open(errfilename, 'w') as errfile:
            print >>errfile, e
            for line in popenObject.stderr:
                print >>errfile, line
    return res

def setUp(target, source, env):
    targets = SConsider.packageRegistry.getPackageTarget('oracle', 'sqlplus')
    target = targets['target']
    if not target:
        raise SConsider.SkipTest('required sqlplus executable not found, skipping test')

    env['ENV']['NLS_LANG'] = '.WE8ISO8859P1'
    relDir = env['BASEOUTDIR'].Dir(env['RELTARGETDIR'])
    configDir='backendtests/config'
    env['ENV']['WD_PATH'] = configDir
    #env['ENV']['WD_LOGONCERR'] = '2'
    Anything.setLocalEnv(env={}, WD_ROOT=relDir.abspath, WD_PATH=configDir)

    global defaults
    try: defaults = Anything.loadFromFile('Defaults.any')
    except IOError: pass
    if not defaults or not defaults.has_key('Oracle'):
        raise SConsider.SkipTest('oracle backend not configured or disabled')

    searchreplacespec= [
        ('##server##', str(defaults['Oracle']['Server'])),
        ('##port##', str(defaults['Oracle']['Port'])),
        ('##sid##', str(defaults['Oracle']['sid'])),
        ("##user1##", str(defaults['Oracle']['Username1'])),
        ("##user2##", str(defaults['Oracle']['Username2'])),
        ("##pass1##", str(defaults['Oracle']['Password1'])),
        ("##pass2##", str(defaults['Oracle']['Password2'])),
    ]
    logDir = relDir.Dir(env['LOGDIR']).Dir(env['VARIANTDIR'])
    path = relDir.Dir(configDir)

    connectstring = "{Username1!s}/{Password1!s}@{Server!s}:{Port!s}/{sid!s}".format(**defaults['Oracle'])
    res = runCommand(
        [target.abspath,'--','-S',connectstring],
        path.File('oratest_dropschema.sql').abspath,
        logDir.abspath,
        env=SConsider.getFlatENV(env)
    )
    if res != 0:
        raise SConsider.SkipTest('failed to drop test schema (rc='+str(res)+'), check error log')
    res = runCommand(
        [target.abspath,'--','-S',connectstring],
        path.File('oratest_schema.sql').abspath,
        logDir.abspath,
        env=SConsider.getFlatENV(env)
    )
    res = runCommand(
        [target.abspath,'--','-S',connectstring],
        path.File('oratest_grant.sql').abspath,
        logDir.abspath,
        filter=lambda string: multiple_replace(searchreplacespec, string),
        env=SConsider.getFlatENV(env)
    )
    if res != 0:
        raise SConsider.SkipTest('failed to grant permissions (rc='+str(res)+'), check error log')

    connectstring = "{Username2!s}/{Password2!s}@{Server!s}:{Port!s}/{sid!s}".format(**defaults['Oracle'])
    res = runCommand(
        [target.abspath,'--','-S',connectstring],
        path.File('oratest_synonym.sql').abspath,
        logDir.abspath,
        filter=lambda string: multiple_replace(searchreplacespec, string),
        env=SConsider.getFlatENV(env)
    )
    if res != 0:
        raise SConsider.SkipTest('failed to create synonyms (rc='+str(res)+'), check error log')

def tearDown(target, source, env):
    pass

buildSettings = {
    packagename : {
        'targetType'       : 'ProgramTest',
        'linkDependencies' : [
            'CoastOracle',
            'testfwWDBase',
        ],
        'requires' : [
            'CoastAppLog',
            'CoastRenderers',
        ],
        'sourceFiles' : SConsider.listFiles(['*.cpp']),
        'copyFiles' : [
            (SConsider.findFiles(['config'],['.any','.txt','.tst','.sql']), S_IRUSR|S_IRGRP|S_IROTH),
        ],
    },
    'backendTests' : {
        'targetType'       : 'ProgramTest',
        'linkDependencies' : [
            'CoastOracle',
            'testfwWDBase',
        ],
        'requires' : [
            'CoastAppLog',
            'CoastRenderers',
            'oracle.sqlplus',
        ],
        'sourceFiles'      : SConsider.listFiles(['backendtests/*.cpp']),
        'copyFiles' : [
            (SConsider.findFiles(['backendtests/config'],['.any','.txt','.tst','.sql']), S_IRUSR|S_IRGRP|S_IROTH),
        ],
        'runConfig' : {
            'setUp': setUp,
            'tearDown': tearDown,
        },
    },
}

SConsider.createTargets(packagename, buildSettings)

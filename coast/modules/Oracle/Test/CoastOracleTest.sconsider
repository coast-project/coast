import os, re, sys, pdb
import SConsider, Anything
from stat import *
from SomeUtils import multiple_replace, runCommand

Import('*')

defaults = None

def setUp(target, source, env):
    target = SConsider.packageRegistry.getPackageTarget('oracle', 'sqlplus')
    if not target:
        raise SConsider.SkipTest('required sqlplus executable not found, skipping test')

    env['ENV']['NLS_LANG'] = '.WE8ISO8859P1'
    configDir='backendtests/config'
    env['ENV']['COAST_PATH'] = configDir
#    env['ENV']['COAST_TRACE_INITFINIS'] = 1
#    env['ENV']['COAST_LOGONCERR'] = 3
    relDir = env['BASEOUTDIR'].Dir(env['RELTARGETDIR'])
    Anything.setLocalEnv(env={}, COAST_ROOT=relDir.abspath, COAST_PATH=configDir)

    global defaults
    try: defaults = Anything.loadFromFile('Defaults.any')
    except IOError: pass
    if not defaults or not defaults.has_key('Oracle'):
        raise SConsider.SkipTest('oracle backend not configured or disabled')

    searchreplacespec= [
        ('##server##', str(defaults['Oracle']['Server'])),
        ('##port##', str(defaults['Oracle']['Port'])),
        ('##sid##', str(defaults['Oracle']['sid'])),
        ("##user1##", str(defaults['Oracle']['Username1'])),
        ("##user2##", str(defaults['Oracle']['Username2'])),
        ("##pass1##", str(defaults['Oracle']['Password1'])),
        ("##pass2##", str(defaults['Oracle']['Password2'])),
    ]
    logDir = relDir.Dir(env['LOGDIR']).Dir(env['VARIANTDIR'])
    path = relDir.Dir(configDir)

    connectstring = "{Username1!s}/{Password1!s}@{Server!s}:{Port!s}/{sid!s}".format(**defaults['Oracle'])
    res = runCommand(
        [target.abspath,'--','-S',connectstring],
        logpath=logDir.abspath,
        filename=path.File('oratest_dropschema.sql').abspath,
        env=SConsider.getFlatENV(env)
    )
    if res != 0:
        raise SConsider.SkipTest('failed to drop test schema (rc='+str(res)+'), check error log')
    res = runCommand(
        [target.abspath,'--','-S',connectstring],
        logpath=logDir.abspath,
        filename=path.File('oratest_schema.sql').abspath,
        env=SConsider.getFlatENV(env)
    )
    res = runCommand(
        [target.abspath,'--','-S',connectstring],
        logpath=logDir.abspath,
        filename=path.File('oratest_grant.sql').abspath,
        filter=lambda string: multiple_replace(searchreplacespec, string),
        env=SConsider.getFlatENV(env)
    )
    if res != 0:
        raise SConsider.SkipTest('failed to grant permissions (rc='+str(res)+'), check error log')

    connectstring = "{Username2!s}/{Password2!s}@{Server!s}:{Port!s}/{sid!s}".format(**defaults['Oracle'])
    res = runCommand(
        [target.abspath,'--','-S',connectstring],
        logpath=logDir.abspath,
        filename=path.File('oratest_synonym.sql').abspath,
        filter=lambda string: multiple_replace(searchreplacespec, string),
        env=SConsider.getFlatENV(env)
    )
    if res != 0:
        raise SConsider.SkipTest('failed to create synonyms (rc='+str(res)+'), check error log')

def tearDown(target, source, env):
    pass

buildSettings = {
    packagename : {
        'targetType'       : 'ProgramTest',
        'linkDependencies' : [
            'CoastOracle',
            'testfwWDBase',
        ],
        'requires' : [
            'CoastAppLog',
            'CoastRenderers',
        ],
        'sourceFiles' : SConsider.listFiles(['*.cpp']),
        'copyFiles' : [
            (SConsider.findFiles(['config'],['.any','.txt','.tst','.sql']), S_IRUSR|S_IRGRP|S_IROTH),
        ],
    },
    'backendTests' : {
        'targetType'       : 'ProgramTest',
        'linkDependencies' : [
            'CoastOracle',
            'testfwWDBase',
        ],
        'requires' : [
            'CoastAppLog',
            'CoastRenderers',
            'oracle.sqlplus',
        ],
        'sourceFiles'      : SConsider.listFiles(['backendtests/*.cpp']),
        'copyFiles' : [
            (SConsider.findFiles(['backendtests/config'],['.any','.txt','.tst','.sql']), S_IRUSR|S_IRGRP|S_IROTH),
        ],
        'runConfig' : {
            'setUp': setUp,
            'tearDown': tearDown,
        },
    },
}

SConsider.createTargets(packagename, buildSettings)

# vim: set et ai ts=4 sw=4:
# -------------------------------------------------------------------------
# Copyright (c) 2010, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------

import pkg_resources
pkg_resources.require(["SConsider"])
import shlex
from stat import *
import Anything
from SomeUtils import multiple_replace, runCommand, getFlatENV, listFiles, findFiles
from RunBuilder import SkipTest

Import('*')

defaults = None
_helperscript_target = 'oracle.script_sqlplus'
_helperscript_argument_separator = '--'


def setUp(target, source, env):
    target = registry.getRealTarget(_helperscript_target)
    if not target:
        raise SkipTest('required ' + _helperscript_target + ' target/executable not found, skipping test')

    env['ENV']['NLS_LANG'] = '.WE8ISO8859P1'
    configDir = 'config'
    env['ENV']['COAST_PATH'] = configDir
    # env['ENV']['COAST_TRACE_INITFINIS'] = 1
    # env['ENV']['COAST_LOGONCERR'] = 3
    relDir = env.getTargetBaseInstallDir()
    Anything.setLocalEnv(env={}, COAST_ROOT=relDir.abspath, COAST_PATH=configDir)

    global defaults
    try:
        defaults = Anything.loadFromFile('Defaults.any')
    except IOError:
        pass
    if not defaults or not defaults.has_key('Oracle'):
        raise SkipTest('oracle backend not configured or disabled')

    searchreplacespec = [
        ('##server##', str(defaults['Oracle']['Server'])),
        ('##port##', str(defaults['Oracle']['Port'])),
        ('##sid##', str(defaults['Oracle']['sid'])),
        ("##user1##", str(defaults['Oracle']['Username1'])),
        ("##user2##", str(defaults['Oracle']['Username2'])),
        ("##pass1##", str(defaults['Oracle']['Password1'])),
        ("##pass2##", str(defaults['Oracle']['Password2'])),
    ]
    logDir = env.getLogInstallDir()
    path = relDir.Dir(configDir)

    connectstring = "{Username1!s}/{Password1!s}@{Server!s}:{Port!s}/{sid!s}".format(**defaults['Oracle'])
    command1 = [target.abspath]
    command1.extend(shlex.split(_helperscript_argument_separator + ' -S ' + connectstring))
    res = runCommand(command1,
                     logpath=logDir.abspath,
                     filename=path.File('oratest_dropschema.sql').abspath,
                     env=getFlatENV(env))
    if res != 0:
        raise SkipTest('failed to drop test schema (rc=' + str(res) + '), check error log')
    res = runCommand(command1,
                     logpath=logDir.abspath,
                     filename=path.File('oratest_schema.sql').abspath,
                     env=getFlatENV(env))
    res = runCommand(command1,
                     logpath=logDir.abspath,
                     filename=path.File('oratest_grant.sql').abspath,
                     filter=lambda string: multiple_replace(searchreplacespec, string),
                     env=getFlatENV(env))
    if res != 0:
        raise SkipTest('failed to grant permissions (rc=' + str(res) + '), check error log')

    connectstring = "{Username2!s}/{Password2!s}@{Server!s}:{Port!s}/{sid!s}".format(**defaults['Oracle'])
    command2 = [target.abspath]
    command2.extend(shlex.split(_helperscript_argument_separator + ' -S ' + connectstring))
    res = runCommand(command2,
                     logpath=logDir.abspath,
                     filename=path.File('oratest_synonym.sql').abspath,
                     filter=lambda string: multiple_replace(searchreplacespec, string),
                     env=getFlatENV(env))
    if res != 0:
        raise SkipTest('failed to create synonyms (rc=' + str(res) + '), check error log')


def tearDown(target, source, env):
    pass


programDepends = [
    'testfwWDBase.testfwWDBase',
    'CoastOracle.CoastOracle',
]
sourceFilesBackend = listFiles(['*.cpp'])
scriptRequireNodesBackend = [
    'CoastAppLog.CoastAppLog',
    'CoastRenderers.CoastRenderers',
    _helperscript_target,
    'oracle.lib_ociicus',
]
copyFilesBackend = [
    (findFiles(['config'], ['.any', '.txt', '.tst', '.sql']), S_IRUSR | S_IRGRP | S_IROTH),
]
runConfigBackend = {
    'setUp': setUp,
    'tearDown': tearDown,
}

_sconsider_dist = pkg_resources.get_distribution("SConsider").parsed_version
if _sconsider_dist < pkg_resources.parse_version("0.5"):
    pass
elif _sconsider_dist >= pkg_resources.parse_version("0.5"):
    import os
    from TargetMaker import EnvBuilder
    from TargetHelpers import createCopyFilesTarget, createPackageTestTarget, createPackageProgram, createPackageProgramScript, createAlias
    reltargetdir = os.path.join('backendtests', packagename)

    def setRelTargetDir(env):
        env.setRelativeTargetDirectory(reltargetdir)

    bin_name = packagename
    bin_target = createPackageProgram(packagename,
                                      bin_name,
                                      sourceFilesBackend,
                                      depend=programDepends,
                                      pkg_local=[setRelTargetDir])
    bins = EnvBuilder().depend(bin_target).build().RegisterPackageTarget(packagename=packagename,
                                                                         targetname='bins')

    copyTarget = createCopyFilesTarget(packagename,
                                       'configfiles',
                                       lambda env: env.getTargetBaseInstallDir(),
                                       copyFilesBackend,
                                       pkg_local=[setRelTargetDir])

    scriptTarget = createPackageProgramScript(packagename,
                                              bin_name,
                                              bin_target,
                                              depend=copyTarget,
                                              require=scriptRequireNodesBackend,
                                              pkg_local=[setRelTargetDir])
    scripts = EnvBuilder().depend(scriptTarget).build().RegisterPackageTarget(packagename=packagename,
                                                                              targetname='scripts')

    testTarget = createPackageTestTarget(packagename, bin_name, scriptTarget, settings=runConfigBackend)

    createAlias('backendtests', testTarget)

    EnvBuilder().depend(bins, scripts).build().RegisterPackageTarget(packagename=packagename,
                                                                     targetname=packagename)

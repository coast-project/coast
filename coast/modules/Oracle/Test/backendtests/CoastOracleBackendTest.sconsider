# vim: set et ai ts=4 sw=4:
# -------------------------------------------------------------------------
# Copyright (c) 2010, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------

import pkg_resources
pkg_resources.require(["SConsider"])
import SConsider
import Anything
from SConsider.SomeUtils import multiple_replace, runCommand, getFlatENV

Import('*')

defaults = None
_helperscript_target = 'oracle.script_sqlplus'


def setUp(target, source, env):
    target = registry.getRealTarget(_helperscript_target)
    if not target:
        raise SConsider.SkipTest(
            'required sqlplus executable not found, skipping test')

    env['ENV']['NLS_LANG'] = '.WE8ISO8859P1'
    configDir = 'config'
    env['ENV']['COAST_PATH'] = configDir
#    env['ENV']['COAST_TRACE_INITFINIS'] = 1
#    env['ENV']['COAST_LOGONCERR'] = 3
    relDir = env.getTargetBaseInstallDir()
    Anything.setLocalEnv(
        env={},
        COAST_ROOT=relDir.abspath,
        COAST_PATH=configDir)

    global defaults
    try:
        defaults = Anything.loadFromFile('Defaults.any')
    except IOError:
        pass
    if not defaults or not defaults.has_key('Oracle'):
        raise SConsider.SkipTest('oracle backend not configured or disabled')

    searchreplacespec = [
        ('##server##', str(defaults['Oracle']['Server'])),
        ('##port##', str(defaults['Oracle']['Port'])),
        ('##sid##', str(defaults['Oracle']['sid'])),
        ("##user1##", str(defaults['Oracle']['Username1'])),
        ("##user2##", str(defaults['Oracle']['Username2'])),
        ("##pass1##", str(defaults['Oracle']['Password1'])),
        ("##pass2##", str(defaults['Oracle']['Password2'])),
    ]
    logDir = env.getLogInstallDir()
    path = relDir.Dir(configDir)

    connectstring = "{Username1!s}/{Password1!s}@{Server!s}:{Port!s}/{sid!s}".format(
        **defaults['Oracle'])
    res = runCommand(
        [target.abspath, '--', '-S', connectstring],
        logpath=logDir.abspath,
        filename=path.File('oratest_dropschema.sql').abspath,
        env=getFlatENV(env)
    )
    if res != 0:
        raise SConsider.SkipTest(
            'failed to drop test schema (rc=' + str(res) + '), check error log')
    res = runCommand(
        [target.abspath, '--', '-S', connectstring],
        logpath=logDir.abspath,
        filename=path.File('oratest_schema.sql').abspath,
        env=getFlatENV(env)
    )
    res = runCommand(
        [target.abspath, '--', '-S', connectstring],
        logpath=logDir.abspath,
        filename=path.File('oratest_grant.sql').abspath,
        filter=lambda string: multiple_replace(searchreplacespec, string),
        env=getFlatENV(env)
    )
    if res != 0:
        raise SConsider.SkipTest(
            'failed to grant permissions (rc=' + str(res) + '), check error log')

    connectstring = "{Username2!s}/{Password2!s}@{Server!s}:{Port!s}/{sid!s}".format(
        **defaults['Oracle'])
    res = runCommand(
        [target.abspath, '--', '-S', connectstring],
        logpath=logDir.abspath,
        filename=path.File('oratest_synonym.sql').abspath,
        filter=lambda string: multiple_replace(searchreplacespec, string),
        env=getFlatENV(env)
    )
    if res != 0:
        raise SConsider.SkipTest(
            'failed to create synonyms (rc=' + str(res) + '), check error log')


def tearDown(target, source, env):
    pass


_sconsider_dist = pkg_resources.get_distribution("SConsider").parsed_version
if _sconsider_dist < pkg_resources.parse_version("0.5"):
    pass
elif _sconsider_dist >= pkg_resources.parse_version("0.5"):
    import os
    reltargetdir = os.path.join('backendtests', packagename)

    def setRelTargetDir(env):
        env.setRelativeTargetDirectory(reltargetdir)

    programDepends = [
        'testfwWDBase.testfwWDBase',
        'CoastOracle.CoastOracle',
    ]

    bin_name = packagename
    bin_target = SConsider.createPackageProgram(
        packagename, bin_name, SConsider.listFiles(['*.cpp']),
        depend=programDepends, pkg_local=[setRelTargetDir])
    bins = SConsider.EnvBuilder().depend(bin_target).build().RegisterPackageTarget(
        packagename=packagename, targetname='bins')

    from stat import *
    copyFiles = [
        (SConsider.listFiles(
            ['config/*.any', 'config/*.txt', 'config/*.tst', 'config/*.sql']),
         S_IRUSR | S_IRGRP | S_IROTH), ]
    copyTarget = SConsider.createCopyFilesTarget(
        packagename, 'configfiles', lambda env: env.getTargetBaseInstallDir(),
        copyFiles, pkg_local=[setRelTargetDir])

    scriptRequireNodes = [
        'CoastAppLog.CoastAppLog',
        'CoastRenderers.CoastRenderers',
        _helperscript_target,
        'oracle.lib_ociicus',
    ]

    scriptTarget = SConsider.createPackageProgramScript(
        packagename, bin_name, bin_target, depend=copyTarget,
        require=scriptRequireNodes, pkg_local=[setRelTargetDir])
    scripts = SConsider.EnvBuilder().depend(scriptTarget).build(
    ).RegisterPackageTarget(packagename=packagename, targetname='scripts')

    testTarget = SConsider.createPackageTestTarget(packagename, bin_name, scriptTarget, settings={
        'setUp': setUp,
        'tearDown': tearDown,
        #              'runParams': '',
    })

    SConsider.createAlias('backendtests', testTarget)

    SConsider.EnvBuilder().depend(
        bins, scripts).build().RegisterPackageTarget(
        packagename=packagename, targetname=packagename)

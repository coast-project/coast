import os, pdb, socket
import SConsider
from stat import *

Import('*')

fqdn=socket.getfqdn()
hostonly=fqdn.split('.')[0]
try:
    domain='.'.join(fqdn.split('.')[1:])
except:
    domain=""

def ModifyConfigFiles(env, searchReplace=[], files=[]):
    for file in files:
        fname = file.abspath
        if os.path.isfile(fname):
            oldmode=os.stat(fname).st_mode
            ## set writable
            os.chmod(fname, oldmode | S_IWUSR)
            ## replace tokens in file
            SConsider.replaceRegexInFile(fname, searchReplace)
            os.chmod(fname, oldmode)

def setUp( target, source, env ):
    tdirabs = env['BASEOUTDIR'].Dir(env['RELTARGETDIR']).abspath
    searchReplace = [
        (r"##FQDN##", fqdn),
        (r"##HOSTNAME##", hostonly),
        (r"##DOMAINONLY##", domain),
    ]
    ModifyConfigFiles(env, searchReplace, SConsider.findFiles([os.path.join(tdirabs,'config')],['.any']))

def tearDown( target, source, env ):
	pass

buildSettings = {
    packagename : {
        'targetType'       : 'ProgramTest',
        'linkDependencies' : ['CoastRenderers', 'testfwWDBase'],
        'requires'         : [],
		'includeSubdir'    : '',
        'sourceFiles'      : SConsider.listFiles( ['*.cpp'] ),
        'copyFiles'        : [( SConsider.findFiles( ['.'], ['.any', '.txt', '.tst', '.html'] ), S_IRUSR | S_IRGRP | S_IROTH ),
                              ( SConsider.findFiles( ['config'], ['.sh'] ), S_IRUSR | S_IRGRP | S_IROTH | S_IXUSR )],
        'runConfig'        : {
			'setUp': setUp,
			'tearDown': tearDown,
		},
    }
}

SConsider.createTargets( packagename, buildSettings )


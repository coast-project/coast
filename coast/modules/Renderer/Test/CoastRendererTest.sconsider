# vim: set et ai ts=4 sw=4:
# -------------------------------------------------------------------------
# Copyright (c) 2010, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------

import pkg_resources
pkg_resources.require(["SConsider"])
import socket
from stat import *
from SomeUtils import listFiles, findFiles, getfqdn

Import('*')

hostonly, domain, fqdn = getfqdn()
localhostname = 'localhost'
localhostip = socket.gethostbyname(localhostname)
# gethostbyaddr here is to resolve potentially different 'localhost' name
localhostname = socket.gethostbyaddr(localhostip)[0]

searchReplace = {
    'FQDN': fqdn,
    'HOSTNAME': hostonly,
    'HOSTNAMEIP': socket.gethostbyname(hostonly),
    'DOMAINONLY': domain,
    'LOCALHOSTNAME': localhostname,
    'LOCALHOSTIP': localhostip,
}


def setUp(target, source, env):
    pass


def tearDown(target, source, env):
    pass


programDepends = [
    'testfwWDBase.testfwWDBase',
    'CoastRenderers.CoastRenderers',
]
sourceFiles = listFiles(['*.cpp'])
copyFiles = [
    (findFiles(['.'], ['.any', '.txt', '.tst', '.html']), S_IRUSR | S_IRGRP | S_IROTH, searchReplace),
    (findFiles(['config'], ['.sh']), S_IRUSR | S_IRGRP | S_IROTH | S_IXUSR),
]
runConfig = {
    'setUp': setUp,
    'tearDown': tearDown,
}

_sconsider_dist = pkg_resources.get_distribution("SConsider").parsed_version
if _sconsider_dist < pkg_resources.parse_version("0.5"):
    from SConsider import createTargets
    buildSettings = {
        packagename: {
            'targetType': 'ProgramTest',
            'linkDependencies': programDepends,
            'includeSubdir': '',
            'sourceFiles': sourceFiles,
            'copyFiles': copyFiles,
            'runConfig': runConfig,
        },
    }

    createTargets(packagename, buildSettings)
elif _sconsider_dist >= pkg_resources.parse_version("0.5"):
    import os
    from TargetMaker import EnvBuilder
    from TargetHelpers import createCopyFilesTarget, createPackageTestTarget, createPackageProgram, createPackageProgramScript, createAlias
    reltargetdir = os.path.join('tests', packagename)

    def setRelTargetDir(env):
        env.setRelativeTargetDirectory(reltargetdir)

    bin_name = packagename
    bin_target = createPackageProgram(packagename,
                                      bin_name,
                                      sourceFiles,
                                      depend=programDepends,
                                      pkg_local=[setRelTargetDir])
    bins = EnvBuilder().depend(bin_target).build().RegisterPackageTarget(packagename=packagename,
                                                                         targetname='bins')

    copyTarget = createCopyFilesTarget(packagename,
                                       'configfiles',
                                       lambda env: env.getTargetBaseInstallDir(),
                                       copyFiles,
                                       pkg_local=[setRelTargetDir])

    scriptTarget = createPackageProgramScript(packagename,
                                              bin_name,
                                              bin_target,
                                              depend=copyTarget,
                                              pkg_local=[setRelTargetDir])
    scripts = EnvBuilder().depend(scriptTarget).build().RegisterPackageTarget(packagename=packagename,
                                                                              targetname='scripts')

    testTarget = createPackageTestTarget(packagename, bin_name, scriptTarget, settings=runConfig)

    createAlias('tests', testTarget)

    EnvBuilder().depend(bins, scripts).build().RegisterPackageTarget(packagename=packagename,
                                                                     targetname=packagename)

# vim: set et ai ts=4 sw=4:
# -------------------------------------------------------------------------
# Copyright (c) 2010, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------

import pkg_resources
pkg_resources.require(["SConsider"])
import os
import socket
import re
import threading
import shutil
import asyncore
from stat import *
from OpenSSL import SSL, crypto
from BaseHTTPServer import HTTPServer
from SimpleHTTPServer import SimpleHTTPRequestHandler
import Anything
import ServerExtensions
from SomeUtils import runCommand, replaceRegexInFile, listFiles, findFiles, removeFiles

Import('*')

defaults = None

_sconsider_dist = pkg_resources.get_distribution("SConsider").parsed_version
_helperscript_target = 'openssl.script_openssl'
if _sconsider_dist < pkg_resources.parse_version("0.3.11"):
    _helperscript_target = 'openssl.openSSL'

    def getRealTarget(fulltargetname):
        from SConsider.PackageRegistry import splitFulltargetname
        packagename, targetname = splitFulltargetname(fulltargetname)
        return registry.getPackageTarget(packagename, targetname)

    if not hasattr(registry, 'getRealTarget'):
        registry.getRealTarget = getRealTarget


class SMTPThread(threading.Thread):
    def __init__(self, host, port, path, logfile):
        super(SMTPThread, self).__init__()
        self.smtpd = ServerExtensions.SMTPFileSinkServer((host, port), None, path, logfile)
        self.daemon = True

    def run(self):
        asyncore.loop()


class MyHTTPServer(HTTPServer):
    """This class wrapper is needed to set allow_reuse_address to True prior to
    initializing it."""
    allow_reuse_address = True


class HTTPEchoReplier(SimpleHTTPRequestHandler):
    def _set_headers(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

    def do_POST(self):
        # Doesn't do anything with posted data
        content_length = int(self.headers['Content-Length'])  # <--- Gets the size of data
        post_data = self.rfile.read(content_length)  # <--- Gets the data itself
        self._set_headers()
        self.wfile.write(post_data)
        print self.headers


def appendReplaceCommandForCert(key, filename, searchReplace):
    try:
        data = open(filename)
        x509 = crypto.load_certificate(crypto.FILETYPE_PEM, data.read())
        data.close()
        complist = x509.get_subject().get_components()
        complist.reverse()
        outname = key + '_subject'
        searchReplace.append((r"##" + outname + "##", ','.join([k + '=' + v for k, v in complist])))
        searchReplace.append(
            (r"##" + outname + "_parts##", ' '.join(['"' + k + '=' + v + '"' for k, v in complist])))
        complist = x509.get_issuer().get_components()
        complist.reverse()
        outname = key + '_issuer'
        searchReplace.append((r"##" + outname + "##", ','.join([k + '=' + v for k, v in complist])))
    except:
        pass


def ModifyConfigFiles(env, searchReplace=[], files=[]):
    for file in files:
        fname = file.abspath
        if os.path.isfile(fname):
            oldmode = os.stat(fname).st_mode
            # set writable
            os.chmod(fname, oldmode | S_IWUSR)
            # replace tokens in file
            replaceRegexInFile(fname, searchReplace)
            os.chmod(fname, oldmode)


servers = []


def startServer(host, port, server_class, handler_class, **kw):
    server = server_class((host, port), handler_class, **kw)
    servers.append(server)
    server.serve_forever()


def prepareMkCaParams(env, commandargs, tdirabs, certdir):
    mkcaScriptName = os.path.join(tdirabs, 'mkca-new.sh')
    # set writable cfgfilename
    target = registry.getRealTarget(_helperscript_target)
    if not os.path.isfile(mkcaScriptName):
        return False
    commandargs.extend([mkcaScriptName])
    if target:
        commandargs.extend(['-b', target.abspath])
        commandargs.extend(['-B', '-S --'])
    cnfFilename = os.path.join(tdirabs, 'openssl.cnf')
    if cnfFilename:
        commandargs.extend(['-o', cnfFilename])
    mkcertDirectory = os.path.join(tdirabs, 'mkcertdir')
    certOutDir = os.path.join(tdirabs, certdir)
    for theDir in [mkcertDirectory, certOutDir]:
        if os.path.isdir(theDir):
            shutil.rmtree(theDir, ignore_errors=True)
        os.mkdir(theDir)
    commandargs.extend(['-d', mkcertDirectory])
    # maybe we should do the following step by hand because we do not need
    # cert suffixes
    commandargs.extend(['-c', certOutDir])
    commandargs.extend(['-C', defaults['HostName']])
    commandargs.extend(['-S', defaults['HostName']])
    fqdn = defaults.get('SSLHost', '')
    if fqdn and fqdn != defaults['HostName']:
        commandargs.extend(['-S', fqdn])


def createCertificates(env):
    tdir = env.getTargetBaseInstallDir()
    commandargs = []
    stdincontent = []
    certdir = 'cert_files'
    certOutDir = os.path.join(tdir.abspath, certdir)
    prepareMkCaParams(env, commandargs, tdir.abspath, certdir)
    cnfFilename = os.path.join(tdir.abspath, 'openssl.cnf')
    logpath = env.getLogInstallDir()
    retCode = runCommand(commandargs,
                         logpath=logpath.abspath,
                         stdincontent='\n'.join(stdincontent),
                         timeout=20.0)
    certFileNodesList = []
    certDict = {}
    if retCode == 0:
        # get list of copied certificates
        certFileNodesList = findFiles([certOutDir], ['.pem', '.p12'])
        certDict = createCertDict(certFileNodesList)
        target = registry.getRealTarget(_helperscript_target)
        sslbin = 'openssl'
        if target:
            sslbin = '' + target.abspath + ' -S --'
        # if there is now c_rehash available, use the following improved
        # script, (base from from
        # http://www.commandlinefu.com/commands/view/2532/c_rehash-replacement)
        command = r"""
for file in *crt*.pem; do
    theHash=$(OPENSSL_CONF=""" + cnfFilename + ' ' + sslbin + r""" x509 -hash -noout -in $(pwd)/$file);
    test -f ${theHash}.0 && true || ln -s $file ${theHash}.0;
done"""
        retCode = runCommand(command,
                             logpath=logpath.abspath,
                             stdincontent=None,
                             shell=True,
                             cwd=certOutDir,
                             timeout=20.0)
    return (certOutDir, certFileNodesList, certDict)


def createCertDict(certFileNodesList):
    certDict = {}
    for cname in [
            'servercrt', 'serverkey', 'clientcrt', 'clientkey', 'fullchain', 'serverchain',
            'chainwoservercrt', 'subCA1crt', 'subCA1key', 'rootCA1crt', 'rootCA1key'
    ]:
        try:
            filename = [
                c.abspath for c in certFileNodesList
                if re.match(r'' + cname + '(_' + defaults['HostName'] + ')?\.pem',
                            os.path.split(c.abspath)[1])
            ][0]
            certDict[cname] = filename
        except:
            pass
    return certDict


def setUp(target, source, env):
    tdir = env.getTargetBaseInstallDir()
    Anything.setLocalEnv(env={}, COAST_ROOT=tdir.abspath)

    global defaults
    try:
        defaults = Anything.loadFromFile('Defaults.any')
    except IOError:
        pass
    if not defaults or not defaults.has_key('HostName'):
        raise SkipTest('Could not load \'Defaults.any\' which is required to ' \
                       'setup tests,\ncheck COAST_ROOT/COAST_PATH setting of ' \
                       'Anything!')

    tdirabs = tdir.abspath
    logpath = env.getLogInstallDir()
    configdir = tdir.Dir('config')
    # FIXME: the following setting is needed to let CgiCallerTest succeed
    env['ENV']['COAST_ROOT'] = env.getTargetBaseInstallDir().abspath
    env['ENV']['COAST_LOGONCERR'] = 5  # ignore ERRORS and below
    #    env['ENV']['COAST_PATH'] = ':'.join(['config', '.'])
    searchReplace = []
    # create certificate files
    certOutDir, certFileNodesList, certDict = createCertificates(env)
    if certDict:
        for key, value in certDict.items():
            searchReplace.append((r"##" + key + "_abs##", value))
            searchReplace.append((r"##" + key + "_rel##", os.path.relpath(value, tdirabs)))
            if key.endswith('crt'):
                appendReplaceCommandForCert(key, value, searchReplace)
        searchReplace.append((r"##certdir_abs##", certOutDir))
        searchReplace.append((r"##certdir_rel##", os.path.relpath(certOutDir, tdirabs)))
        ModifyConfigFiles(env, searchReplace, findFiles([configdir], ['.any']))
        threading.Thread(target=startServer,
                         args=[
                             defaults['HostName'], defaults['SSLPort'], ServerExtensions.SecureHTTPServer,
                             ServerExtensions.SecureHTTPRequestHandler
                         ],
                         kwargs={
                             'certFile': certDict.get('servercrt'),
                             'keyFile': certDict.get('serverkey'),
                             'caChainFile': certDict.get('chainwoservercrt')
                         }).start()
        threading.Thread(target=startServer,
                         args=[defaults['HostName'], defaults['HttpPort'], MyHTTPServer,
                               HTTPEchoReplier]).start()
        SMTPThread(defaults['HostName'], defaults['SMTPMailhostPort'],
                   env.getLogInstallDir().abspath, 'smtp.log').start()


def tearDown(target, source, env):
    for server in servers:
        server.shutdown()
    # delete generated files
    # removeFiles(findFiles([env.getTargetBaseInstallDir()],
    # extensions=['.res', '.tst', '.txt' ], matchfiles=['include.any']))


programDepends = [
    'testfwWDBase.testfwWDBase',
    'CoastStdDataAccess.CoastStdDataAccess',
]
scriptRequireNodes = [
    'CoastRenderers.CoastRenderers', 'CoastStringRenderers.CoastStringRenderers', _helperscript_target
]
sourceFiles = listFiles(['*.cpp'])
copyFiles = [
    (findFiles(['.'], extensions=['.sh']), S_IRUSR | S_IRGRP | S_IROTH | S_IXUSR),
    (findFiles(['.'], extensions=['.any', '.html', '.gif', '.txt']), S_IRUSR | S_IRGRP | S_IROTH),
    (findFiles(['config'], matchfiles=['NotReadable']), S_IXUSR),
    (findFiles(['.'], matchfiles=['openssl.cnf']), S_IRUSR | S_IRGRP | S_IROTH),
    (findFiles(['.'], matchfiles=['mkca-new.sh']), S_IRUSR | S_IRGRP | S_IROTH | S_IXUSR),
]
runConfig = {
    'setUp': setUp,
    'tearDown': tearDown,
}

if _sconsider_dist < pkg_resources.parse_version("0.5"):
    from SConsider import createTargets
    buildSettings = {
        packagename: {
            'targetType': 'ProgramTest',
            'linkDependencies': programDepends,
            'requires': scriptRequireNodes,
            'includeSubdir': '',
            'sourceFiles': sourceFiles,
            'copyFiles': copyFiles,
            'runConfig': runConfig,
        },
    }

    createTargets(packagename, buildSettings)
elif _sconsider_dist >= pkg_resources.parse_version("0.5"):
    from TargetMaker import EnvBuilder
    from TargetHelpers import createCopyFilesTarget, createPackageTestTarget, createPackageProgram, createPackageProgramScript, createAlias
    reltargetdir = os.path.join('tests', packagename)

    def setRelTargetDir(env):
        env.setRelativeTargetDirectory(reltargetdir)

    bin_name = packagename
    bin_target = createPackageProgram(packagename,
                                      bin_name,
                                      sourceFiles,
                                      depend=programDepends,
                                      pkg_local=[setRelTargetDir])
    bins = EnvBuilder().depend(bin_target).build().RegisterPackageTarget(packagename=packagename,
                                                                         targetname='bins')

    copyTarget = createCopyFilesTarget(packagename,
                                       'configfiles',
                                       lambda env: env.getTargetBaseInstallDir(),
                                       copyFiles,
                                       pkg_local=[setRelTargetDir])

    scriptTarget = createPackageProgramScript(packagename,
                                              bin_name,
                                              bin_target,
                                              depend=copyTarget,
                                              require=scriptRequireNodes,
                                              pkg_local=[setRelTargetDir])
    scripts = EnvBuilder().depend(scriptTarget).build().RegisterPackageTarget(packagename=packagename,
                                                                              targetname='scripts')

    testTarget = createPackageTestTarget(packagename, bin_name, scriptTarget, settings=runConfig)

    createAlias('tests', testTarget)

    EnvBuilder().depend(bins, scripts).build().RegisterPackageTarget(packagename=packagename,
                                                                     targetname=packagename)

# vim: set et ai ts=4 sw=4:
# -------------------------------------------------------------------------
# Copyright (c) 2010, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------

import pkg_resources
pkg_resources.require(["SConsider"])
import os
import shlex
from stat import *
import Anything
from SomeUtils import runCommand, getFlatENV, listFiles, findFiles
from RunBuilder import SkipTest

Import('*')

defaults = None

_sconsider_dist = pkg_resources.get_distribution("SConsider").parsed_version
_helperscript_target = 'sybase.script_isql'
_helperscript_argument_separator = '--'
if _sconsider_dist < pkg_resources.parse_version("0.3.11"):
    _helperscript_target = 'sybase.isql'
    _helperscript_argument_separator = ''

    def getRealTarget(fulltargetname):
        from SConsider.PackageRegistry import splitFulltargetname
        packagename, targetname = splitFulltargetname(fulltargetname)
        return registry.getPackageTarget(packagename, targetname)

    if not hasattr(registry, 'getRealTarget'):
        registry.getRealTarget = getRealTarget

configDir = 'config'

searchReplaceDict = {
    'USERNAME': 'coast_user',
    'PASSWORD': 'coast_pwd',
    'SERVER': 'SIFSCOAST1',
    'HOSTNAME': 'sifs-coast1.hsr.ch',
    'PORT': '5000',
    'DATABASE': 'coast_test',
    'INTERFACESFILE': os.path.join(configDir, 'interfaces'),
}


def setUp(target, source, env):
    target = registry.getRealTarget(_helperscript_target)
    if not target:
        raise SkipTest('required ' + _helperscript_target + ' target/executable not found, skipping test')

    env['ENV']['COAST_PATH'] = configDir
    # env['ENV']['COAST_TRACE_INITFINIS'] = 1
    # env['ENV']['COAST_LOGONCERR'] = 3
    relDir = env.getTargetBaseInstallDir()
    Anything.setLocalEnv(env={}, COAST_ROOT=relDir.abspath, COAST_PATH=configDir)

    global defaults
    try:
        defaults = Anything.loadFromFile('Defaults.any')
    except IOError:
        pass
    if not defaults or not defaults.has_key('Sybase'):
        raise SkipTest('sybase backend not configured or disabled')

    logDir = env.getLogInstallDir()
    path = relDir.Dir(configDir)

    connectstring = "{Username!s} -P {Password!s} -S {Server!s}".format(**defaults['Sybase'])
    command = [target.abspath]
    command.extend(shlex.split(_helperscript_argument_separator + ' -U ' + connectstring))
    command.extend(['-I', path.File('interfaces').abspath])
    res = runCommand(command,
                     logpath=logDir.abspath,
                     filename=path.File('dropPub2.sql').abspath,
                     env=getFlatENV(env),
                     timeout=10.0)
    if res != 0:
        raise SkipTest('failed to drop test database (rc=' + str(res) + '), check error log')
    res = runCommand(command,
                     logpath=logDir.abspath,
                     filename=path.File('createPub2.sql').abspath,
                     env=getFlatENV(env),
                     timeout=20.0)
    if res != 0:
        raise SkipTest('failed to create test database (rc=' + str(res) + '), check error log')


def tearDown(target, source, env):
    pass


programDepends = [
    'testfwWDBase.testfwWDBase',
    'CoastSybaseCT.CoastSybaseCT',
]
scriptRequireNodes = [
    'CoastActions.CoastActions',
    _helperscript_target,
]
sourceFiles = listFiles(['*.cpp'])
copyFiles = [
    (findFiles([configDir], extensions=['.any', '.sql'],
               matchfiles=['interfaces']), S_IRUSR | S_IRGRP | S_IROTH, searchReplaceDict),
]
runConfig = {
    'setUp': setUp,
    'tearDown': tearDown,
}

if _sconsider_dist < pkg_resources.parse_version("0.5"):
    from SConsider import createTargets
    buildSettings = {
        packagename: {
            'targetType': 'ProgramTest',
            'linkDependencies': programDepends,
            'requires': scriptRequireNodes,
            'sourceFiles': sourceFiles,
            'copyFiles': copyFiles,
            'runConfig': runConfig,
        },
    }

    createTargets(packagename, buildSettings)
elif _sconsider_dist >= pkg_resources.parse_version("0.5"):
    from TargetMaker import EnvBuilder
    from TargetHelpers import createCopyFilesTarget, createPackageTestTarget, createPackageProgram, createPackageProgramScript, createAlias
    reltargetdir = os.path.join('backendtests', packagename)

    def setRelTargetDir(env):
        env.setRelativeTargetDirectory(reltargetdir)

    bin_name = packagename
    bin_target = createPackageProgram(packagename,
                                      bin_name,
                                      sourceFiles,
                                      depend=programDepends,
                                      pkg_local=[setRelTargetDir])
    bins = EnvBuilder().depend(bin_target).build().RegisterPackageTarget(packagename=packagename,
                                                                         targetname='bins')

    copyTarget = createCopyFilesTarget(packagename,
                                       'configfiles',
                                       lambda env: env.getTargetBaseInstallDir(),
                                       copyFiles,
                                       pkg_local=[setRelTargetDir])

    scriptTarget = createPackageProgramScript(packagename,
                                              bin_name,
                                              bin_target,
                                              depend=[copyTarget, 'sybase.generatescriptvars'],
                                              require=scriptRequireNodes,
                                              pkg_local=[setRelTargetDir])
    scripts = EnvBuilder().depend(scriptTarget).build().RegisterPackageTarget(packagename=packagename,
                                                                              targetname='scripts')

    testTarget = createPackageTestTarget(packagename, bin_name, scriptTarget, settings=runConfig)
    createAlias('backendtests', testTarget)

    EnvBuilder().depend(bins, scripts).build().RegisterPackageTarget(packagename=packagename,
                                                                     targetname=packagename)

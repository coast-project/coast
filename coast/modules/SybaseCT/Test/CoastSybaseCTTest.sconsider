# vim: set et ai ts=4 sw=4:
# -------------------------------------------------------------------------
# Copyright (c) 2010, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------

import pkg_resources
pkg_resources.require(["SConsider"])
import SConsider
import Anything
import os
import re
import sys
import shlex
from stat import *
from SConsider.SomeUtils import runCommand, replaceRegexInFile, multiple_replace, getFlatENV

Import('*')

defaults = None

_sconsider_dist = pkg_resources.get_distribution("SConsider").parsed_version
_helperscript_target = 'sybase.script_isql'
_helperscript_argument_separator = '--'
if _sconsider_dist < pkg_resources.parse_version("0.3.11"):
    _helperscript_target = 'sybase.isql'
    _helperscript_argument_separator = ''

    def getRealTarget(fulltargetname):
        from SConsider import splitTargetname
        packagename, targetname = splitTargetname(fulltargetname)
        return registry.getPackageTarget(packagename, targetname)

    if not hasattr(registry, 'getRealTarget'):
        registry.getRealTarget = getRealTarget


def ModifyConfigFiles(env, searchReplace=[], files=[]):
    for file in files:
        fname = file.abspath
        if os.path.isfile(fname):
            oldmode = os.stat(fname).st_mode
            # set writable
            os.chmod(fname, oldmode | S_IWUSR)
            # replace tokens in file
            replaceRegexInFile(fname, searchReplace)
            os.chmod(fname, oldmode)


def setUp(target, source, env):
    target = registry.getRealTarget(_helperscript_target)
    if not target:
        raise SConsider.SkipTest('required ' + _helperscript_target +
                                 ' target/executable not found, skipping test')

    relDir = env.getTargetBaseInstallDir()
    logDir = env.getLogInstallDir()
    configdir = relDir.Dir('config')
    Anything.setLocalEnv(env={}, COAST_ROOT=relDir.abspath)
    global defaults
    try:
        defaults = Anything.loadFromFile('Defaults.any')
    except IOError:
        pass
    if not defaults or not defaults.has_key('Sybase'):
        raise SConsider.SkipTest('sybase backend not configured')

    searchreplacespec = [
        ('##database##', str(defaults['Sybase']['Database'])),
        ('##server##', str(defaults['Sybase']['Server'])),
        ('##hostname##', str(defaults['Sybase']['Hostname'])),
        ('##port##', str(defaults['Sybase']['Port'])),
        ('##username##', str(defaults['Sybase']['Username'])),
        ('##password##', str(defaults['Sybase']['Password'])),
    ]

    ModifyConfigFiles(env,
                      searchreplacespec,
                      SConsider.findFiles([configdir],
                                          matchfiles=['interfaces']))

    command = [target.abspath]
    command.extend(shlex.split(
        _helperscript_argument_separator +
        " -U {Username!s} -P {Password!s} -S {Server!s}".format(**defaults[
            'Sybase'])))
    command.extend(['-I', configdir.File('interfaces').abspath])
    res = runCommand(
        command,
        logpath=logDir.abspath,
        filename=configdir.File('dropPub2.sql').abspath,
        filter=lambda string: multiple_replace(searchreplacespec, string),
        env=getFlatENV(env))
    if res != 0:
        raise SConsider.SkipTest('failed to drop test database (rc=' + str(res)
                                 + '), check error log')
    res = runCommand(
        command,
        logpath=logDir.abspath,
        filename=configdir.File('createPub2.sql').abspath,
        filter=lambda string: multiple_replace(searchreplacespec, string),
        env=getFlatENV(env))
    if res != 0:
        raise SConsider.SkipTest('failed to create test database (rc=' + str(
            res) + '), check error log')


def tearDown(target, source, env):
    pass


if _sconsider_dist < pkg_resources.parse_version("0.5"):
    buildSettings = {
        packagename: {
            'targetType': 'ProgramTest',
            'linkDependencies': [
                'CoastSybaseCT',
                'testfwWDBase',
            ],
            'requires': [
                'CoastActions',
                _helperscript_target,
            ],
            'sourceFiles': SConsider.listFiles(['*.cpp']),
            'copyFiles': [
                (SConsider.listFiles(
                    ['config/*.any', 'config/*.sql', 'config/interfaces']),
                 S_IRUSR | S_IRGRP | S_IROTH),
            ],
            'runConfig': {
                'setUp': setUp,
                'tearDown': tearDown,
            },
        },
    }

    SConsider.createTargets(packagename, buildSettings)

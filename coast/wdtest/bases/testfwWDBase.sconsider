# vim: set et ai ts=4 sw=4:
# -------------------------------------------------------------------------
# Copyright (c) 2010, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------

import pkg_resources
pkg_resources.require(["SConsider"])
from SomeUtils import listFiles
Import('*')

libDepends = [
    'testfwFoundation.testfwFoundation',
    'CoastWDBase.CoastWDBase',
]
sourceFiles = listFiles(['*.cpp'])

_sconsider_dist = pkg_resources.get_distribution("SConsider").parsed_version
if _sconsider_dist < pkg_resources.parse_version("0.5"):
    from SConsider import createTargets
    buildSettings = {
        packagename: {
            'linkDependencies': libDepends,
            'includeSubdir': '',
            'sourceFiles': sourceFiles,
            'targetType': 'LibraryShared',
            'lazylinking': True,
            'appendUnique': {},
            'public': {
                'includes': listFiles(['*.h']),
            }
        }
    }

    createTargets(packagename, buildSettings)
elif _sconsider_dist >= pkg_resources.parse_version("0.5"):
    from TargetMaker import EnvBuilder
    from TargetHelpers import createPackageSharedLibrary, createPackageStaticLibrary
    includeTarget = EnvBuilder(export=[EnvBuilder().include(Dir('.'))]).build().RegisterPackageTarget(
        packagename=packagename, targetname='include')

    if EnvBuilder().build()["PLATFORM"] == "win32":
        lib = createPackageStaticLibrary(packagename,
                                         packagename,
                                         sourceFiles,
                                         depend=[includeTarget] + libDepends,
                                         pkg_local=[lambda env: env.allowUnresolvedLinkSymbols()])
    else:
        lib = createPackageSharedLibrary(packagename,
                                         packagename,
                                         sourceFiles,
                                         depend=[includeTarget] + libDepends,
                                         pkg_local=[lambda env: env.allowUnresolvedLinkSymbols()])
    libs = EnvBuilder().depend(lib).build().RegisterPackageTarget(packagename=packagename, targetname='libs')

    EnvBuilder().depend(includeTarget, libs).build().RegisterPackageTarget(packagename=packagename,
                                                                           targetname=packagename)

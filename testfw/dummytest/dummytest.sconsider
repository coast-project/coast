# vim: set et ai ts=4 sw=4:
# -------------------------------------------------------------------------
# Copyright (c) 2010, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------

import pkg_resources
pkg_resources.require(["SConsider"])
from SConsider.SomeUtils import listFiles
Import('*')


def setUp(target, source, env):
    pass


def tearDown(target, source, env):
    pass


sourceFilesTest = listFiles(['*Test.cpp', 'SetupRunner.cpp'])
programDepends = ['testfw.testfw']
runConfigTest = {
    'setUp': setUp,
    'tearDown': tearDown,
    'runParams': '-- -list',
}
sourceFilesAlloc = ['myalloc.cpp']
runConfigRunner = {
    'runParams': '',
}

_sconsider_dist = pkg_resources.get_distribution("SConsider").parsed_version
if _sconsider_dist < pkg_resources.parse_version("0.5"):
    from SConsider import createTargets
    # some of the tests are intended to fail, so only list available tests
    buildSettings = {
        packagename: {
            'includeSubdir': '',
            'linkDependencies': programDepends,
            'sourceFiles': sourceFilesTest,
            'targetType': 'ProgramTest',
            'runConfig': runConfigTest,
        },
        'alloc': {
            'includeSubdir': '',
            'sourceFiles': sourceFilesAlloc,
            'targetType': 'Program',
            'targetName': 'alloc',
        },
        'runner': {
            'targetType': 'ProgramApp',
            'targetName': 'allocrunner',
            'usedTarget': packagename + '.' + 'alloc',
            'runConfig': runConfigRunner,
        },
    }

    createTargets(packagename, buildSettings)
    pass
elif _sconsider_dist >= pkg_resources.parse_version("0.5"):
    import os
    from TargetMaker import EnvBuilder
    from TargetHelpers import createPackageTestTarget, createPackageRunTarget, createPackageProgramScript, createPackageProgram, createAlias
    reltargetdir = os.path.join('tests', packagename)

    def setRelTargetDir(env):
        env.setRelativeTargetDirectory(reltargetdir)

    bin_name = packagename
    alloc_name = 'alloc'
    bin_target = createPackageProgram(packagename,
                                      bin_name,
                                      sourceFilesTest,
                                      depend=programDepends,
                                      pkg_local=[setRelTargetDir])
    alloc_target = createPackageProgram(packagename,
                                        alloc_name,
                                        sourceFilesAlloc,
                                        pkg_local=[setRelTargetDir])
    bins = EnvBuilder().depend(bin_target,
                               alloc_target).build().RegisterPackageTarget(packagename=packagename,
                                                                           targetname='bins')

    scriptTarget = createPackageProgramScript(packagename, bin_name, bin_target, pkg_local=[setRelTargetDir])
    alloc_script = createPackageProgramScript(packagename,
                                              alloc_name,
                                              alloc_target,
                                              pkg_local=[setRelTargetDir])
    scripts = EnvBuilder().depend(scriptTarget,
                                  alloc_script).build().RegisterPackageTarget(packagename=packagename,
                                                                              targetname='scripts')

    testTarget = createPackageTestTarget(packagename, bin_name, scriptTarget, settings=runConfigTest)
    alloc_runner = createPackageRunTarget(packagename, 'runner', alloc_script, settings=runConfigRunner)
    EnvBuilder().depend().build().RegisterPackageTarget(packagename=packagename,
                                                        targetname='runner',
                                                        target=alloc_runner)

    # do not add to tests alias as some tests intentionally fail!
    # createAlias('tests', testTarget)

    EnvBuilder().depend(bins, scripts).build().RegisterPackageTarget(packagename=packagename,
                                                                     targetname=packagename)
